"""
Good Face Team
Developer: Vladislav Klimov
Team period: 2021 - 2025
File creation date: October 26, 2025

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
"""

#!/usr/bin/env python3
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import subprocess
import threading
import os
import time
import sys

class RavenOSInstaller:
    def __init__(self):
        if "DISPLAY" not in os.environ:
            print("üöÄ –ó–∞–ø—É—Å–∫–∞—é Xorg –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
            subprocess.run("Xorg :0 &", shell=True)
            time.sleep(2)
            os.environ["DISPLAY"] = ":0"
            
        self.root = tk.Tk()
        self.root.title("Reaven OS Installer")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='#f0f0f0')
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.current_step = 0
        self.username = tk.StringVar(value="user")
        self.password = tk.StringVar(value="reaven123")
        self.hostname = tk.StringVar(value="reavenos")
        self.timezone = tk.StringVar(value="Europe/Moscow")
        self.locale = tk.StringVar(value="en_US.UTF-8")
        self.keyboard_layout = tk.StringVar(value="us")
        self.selected_disk = tk.StringVar(value="")
        self.use_goodface_id = tk.BooleanVar(value=False)
        self.goodface_email = tk.StringVar(value="")
        self.goodface_password = tk.StringVar(value="")
        
        # –§–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.installation_started = False
        self.installation_completed = False
        
        # –°–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
        self.disks = []
        
        self.setup_ui()
        self.load_disks()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.main_frame)
        title_frame.pack(fill='x', pady=(0, 20))
        
        ttk.Label(title_frame, text="Reaven OS", font=('Arial', 24, 'bold')).pack(side='left')
        ttk.Label(title_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã", font=('Arial', 14)).pack(side='right')
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.pack(fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.nav_frame = ttk.Frame(self.main_frame)
        self.nav_frame.pack(fill='x', pady=(20, 0))
        
        self.back_btn = ttk.Button(self.nav_frame, text="–ù–∞–∑–∞–¥", command=self.previous_step)
        self.back_btn.pack(side='left')
        
        self.next_btn = ttk.Button(self.nav_frame, text="–î–∞–ª–µ–µ", command=self.next_step)
        self.next_btn.pack(side='right')
        
        self.show_step(0)
        
    def show_step(self, step):
        self.current_step = step
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
        steps = [
            self.step_welcome,
            self.step_disk_selection,
            self.step_region,
            self.step_user_account,
            self.step_installation,
            self.step_finish
        ]
        
        if step < len(steps):
            steps[step]()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.back_btn.config(state='normal' if step > 0 else 'disabled')
        
        if step == len(steps) - 1:
            if self.installation_completed:
                self.next_btn.config(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", command=self.finish_installation)
            else:
                self.next_btn.config(text="–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É", command=self.start_installation)
        elif step == len(steps) - 2:  # –®–∞–≥ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            self.next_btn.config(text="–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É", command=self.start_installation)
        else:
            self.next_btn.config(text="–î–∞–ª–µ–µ", command=self.next_step)
    
    def step_welcome(self):
        content = ttk.Frame(self.content_frame)
        content.pack(fill='both', expand=True, padx=50, pady=50)
        
        ttk.Label(content, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Reaven OS!", 
                 font=('Arial', 20, 'bold')).pack(pady=20)
        
        ttk.Label(content, text="–ò–≥—Ä–æ–≤–æ–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ Arch Linux",
                 font=('Arial', 14)).pack(pady=10)
        
        features = [
            "üéÆ –ì–æ—Ç–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º Steam, Wine, Lutris",
            "üöÄ –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∏–≥—Ä",
            "üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª KDE Plasma",
            "üîß –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Vulkan –∏ –∏–≥—Ä–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Good Face ID –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        ]
        
        for feature in features:
            ttk.Label(content, text=feature, font=('Arial', 12)).pack(anchor='w', pady=5)
        
        ttk.Label(content, text="–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É",
                 font=('Arial', 11)).pack(pady=20)
    
    def step_disk_selection(self):
        content = ttk.Frame(self.content_frame)
        content.pack(fill='both', expand=True)
        
        ttk.Label(content, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏", 
                 font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–∏—Å–∫–æ–≤
        disk_frame = ttk.Frame(content)
        disk_frame.pack(fill='both', expand=True, padx=50)
        
        # –°–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤
        self.disk_listbox = tk.Listbox(disk_frame, height=10, font=('Arial', 11))
        self.disk_listbox.pack(fill='both', expand=True)
        
        for disk in self.disks:
            self.disk_listbox.insert('end', f"{disk['name']} - {disk['size']} - {disk['model']}")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å–∫–∞–º–∏
        disk_buttons = ttk.Frame(content)
        disk_buttons.pack(pady=10)
        
        ttk.Button(disk_buttons, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                  command=self.load_disks).pack(side='left', padx=5)
        ttk.Button(disk_buttons, text="–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫", 
                  command=self.format_disk).pack(side='left', padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏—Å–∫–µ
        self.disk_info = ttk.Label(content, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –∏–∑ —Å–ø–∏—Å–∫–∞", 
                                  font=('Arial', 10))
        self.disk_info.pack(pady=10)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤ —Å–ø–∏—Å–∫–µ
        self.disk_listbox.bind('<<ListboxSelect>>', self.on_disk_select)
    
    def step_region(self):
        content = ttk.Frame(self.content_frame)
        content.pack(fill='both', expand=True, padx=50, pady=20)
        
        ttk.Label(content, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏", 
                 font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        ttk.Label(content, text="–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:").pack(anchor='w')
        timezone_combo = ttk.Combobox(content, textvariable=self.timezone,
                                     values=["Europe/Moscow", "Europe/London", "America/New_York"])
        timezone_combo.pack(fill='x', pady=5)
        
        # –õ–æ–∫–∞–ª—å
        ttk.Label(content, text="–õ–æ–∫–∞–ª—å:").pack(anchor='w', pady=(10,0))
        locale_combo = ttk.Combobox(content, textvariable=self.locale,
                                   values=["en_US.UTF-8", "ru_RU.UTF-8"])
        locale_combo.pack(fill='x', pady=5)
        
        # –†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        ttk.Label(content, text="–†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:").pack(anchor='w', pady=(10,0))
        keyboard_combo = ttk.Combobox(content, textvariable=self.keyboard_layout,
                                     values=["us", "ru"])
        keyboard_combo.pack(fill='x', pady=5)
    
    def step_user_account(self):
        content = ttk.Frame(self.content_frame)
        content.pack(fill='both', expand=True, padx=50, pady=20)
        
        ttk.Label(content, text="–°–æ–∑–¥–∞–Ω–∏–µ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏", 
                 font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å
        ttk.Label(content, text="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:").pack(anchor='w')
        ttk.Entry(content, textvariable=self.username).pack(fill='x', pady=5)
        
        ttk.Label(content, text="–ü–∞—Ä–æ–ª—å:").pack(anchor='w', pady=(10,0))
        ttk.Entry(content, textvariable=self.password, show="*").pack(fill='x', pady=5)
        
        ttk.Label(content, text="–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:").pack(anchor='w', pady=(10,0))
        ttk.Entry(content, textvariable=self.hostname).pack(fill='x', pady=5)
        
        # Good Face ID
        ttk.Checkbutton(content, text="–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Good Face ID", 
                       variable=self.use_goodface_id).pack(anchor='w', pady=(20,0))
        
        self.gf_frame = ttk.Frame(content)
        
        ttk.Label(self.gf_frame, text="Email Good Face ID:").pack(anchor='w')
        ttk.Entry(self.gf_frame, textvariable=self.goodface_email).pack(fill='x', pady=5)
        
        ttk.Label(self.gf_frame, text="–ü–∞—Ä–æ–ª—å Good Face ID:").pack(anchor='w', pady=(10,0))
        ttk.Entry(self.gf_frame, textvariable=self.goodface_password, show="*").pack(fill='x', pady=5)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å Good Face ID –ø–æ–ª–µ–π
        self.use_goodface_id.trace('w', self.toggle_goodface_fields)
        self.toggle_goodface_fields()
    
    def step_installation(self):
        content = ttk.Frame(self.content_frame)
        content.pack(fill='both', expand=True)
        
        ttk.Label(content, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã", 
                 font=('Arial', 16, 'bold')).pack(pady=20)
        
        if not self.installation_started:
            # –≠–∫—Ä–∞–Ω –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            ttk.Label(content, text="–í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ!", 
                     font=('Arial', 14)).pack(pady=10)
            
            ttk.Label(content, text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:", 
                     font=('Arial', 12, 'bold')).pack(pady=(20, 10))
            
            summary_text = f"""
            –î–∏—Å–∫: {self.selected_disk.get()}
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username.get()}
            –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {self.hostname.get()}
            –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {self.timezone.get()}
            Good Face ID: {'–î–∞' if self.use_goodface_id.get() else '–ù–µ—Ç'}
            """
            
            ttk.Label(content, text=summary_text, font=('Arial', 11)).pack(pady=10)
            
            ttk.Label(content, text="–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                     font=('Arial', 11)).pack(pady=20)
            
        else:
            # –≠–∫—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.progress = ttk.Progressbar(content, mode='determinate')
            self.progress.pack(fill='x', padx=50, pady=10)
            
            # –°–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤
            self.steps_frame = ttk.Frame(content)
            self.steps_frame.pack(fill='both', expand=True, padx=50)
            
            self.installation_steps = [
                "–†–∞–∑–º–µ—Ç–∫–∞ –¥–∏—Å–∫–∞",
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã",
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ KDE Plasma",
                "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞",
                "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
            ]
            
            self.step_labels = []
            for i, step in enumerate(self.installation_steps):
                label = ttk.Label(self.steps_frame, text=f"‚óã {step}", font=('Arial', 11))
                label.pack(anchor='w', pady=2)
                self.step_labels.append(label)
            
            # –õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.log_text = tk.Text(content, height=8, bg='black', fg='white', 
                                   font=('Monospace', 9))
            self.log_text.pack(fill='both', expand=True, padx=50, pady=10)
    
    def step_finish(self):
        content = ttk.Frame(self.content_frame)
        content.pack(fill='both', expand=True, padx=50, pady=50)
        
        if self.installation_completed:
            ttk.Label(content, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 
                     font=('Arial', 20, 'bold'), foreground='green').pack(pady=20)
            
            ttk.Label(content, text="Reaven OS —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä.",
                     font=('Arial', 14)).pack(pady=10)
            
            summary = f"""
            –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.username.get()}
            –ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {self.hostname.get()}
            –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {self.timezone.get()}
            Good Face ID: {'–î–∞' if self.use_goodface_id.get() else '–ù–µ—Ç'}
            
            –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:
            ‚Ä¢ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É KDE Plasma
            ‚Ä¢ –ó–∞–ø—É—Å–∫–∞—Ç—å Steam –∏ –∏–≥—Ä—ã
            ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            ‚Ä¢ –ù–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
            """
            
            ttk.Label(content, text=summary, font=('Arial', 11)).pack(pady=20)
            
            ttk.Label(content, text="–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.",
                     font=('Arial', 11)).pack(pady=10)
        else:
            ttk.Label(content, text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                     font=('Arial', 16, 'bold'), foreground='red').pack(pady=20)
    
    def toggle_goodface_fields(self, *args):
        if self.use_goodface_id.get():
            self.gf_frame.pack(fill='x', pady=10)
        else:
            self.gf_frame.pack_forget()
    
    def load_disks(self):
        self.disks = []
        try:
            result = subprocess.run("lsblk -J -o NAME,SIZE,MODEL,MOUNTPOINT", 
                                  shell=True, capture_output=True, text=True)
            import json
            disks_data = json.loads(result.stdout)
            
            for device in disks_data['blockdevices']:
                if device['name'].startswith(('sd', 'vd', 'nvme')):
                    self.disks.append({
                        'name': f"/dev/{device['name']}",
                        'size': device['size'],
                        'model': device.get('model', 'Unknown'),
                        'mountpoint': device.get('mountpoint', '')
                    })
            
            if hasattr(self, 'disk_listbox'):
                self.disk_listbox.delete(0, 'end')
                for disk in self.disks:
                    self.disk_listbox.insert('end', f"{disk['name']} - {disk['size']} - {disk['model']}")
                    
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–∏—Å–∫–æ–≤: {e}")
    
    def on_disk_select(self, event):
        selection = self.disk_listbox.curselection()
        if selection:
            disk_index = selection[0]
            self.selected_disk.set(self.disks[disk_index]['name'])
            disk_info = self.disks[disk_index]
            self.disk_info.config(
                text=f"–í—ã–±—Ä–∞–Ω: {disk_info['name']} | –†–∞–∑–º–µ—Ä: {disk_info['size']} | –ú–æ–¥–µ–ª—å: {disk_info['model']}"
            )
    
    def format_disk(self):
        if not self.selected_disk.get():
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                              f"–í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫–µ {self.selected_disk.get()} –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            try:
                subprocess.run(f"wipefs -a {self.selected_disk.get()}", shell=True)
                subprocess.run(f"parted -s {self.selected_disk.get()} mklabel gpt", shell=True)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω")
                self.load_disks()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def next_step(self):
        if self.current_step == 1 and not self.selected_disk.get():
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
        self.show_step(self.current_step + 1)
    
    def previous_step(self):
        self.show_step(self.current_step - 1)
    
    def start_installation(self):
        if not self.selected_disk.get():
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
            return
            
        self.installation_started = True
        self.show_step(4)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.installation_process)
        thread.daemon = True
        thread.start()
    
    def update_progress(self, step, status):
        if step < len(self.step_labels):
            self.step_labels[step].config(text=f"‚úÖ {self.installation_steps[step]}")
        
        self.progress['value'] = (step / len(self.installation_steps)) * 100
        self.log_message(status)
        self.root.update()
    
    def log_message(self, message):
        if hasattr(self, 'log_text'):
            self.log_text.insert('end', f"{message}\n")
            self.log_text.see('end')
            self.root.update()
    
    def run_command(self, command):
        try:
            self.log_message(f"‚ñ∂ {command}")
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                self.log_message(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
                return False
            return True
        except Exception as e:
            self.log_message(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def installation_process(self):
        try:
            disk = self.selected_disk.get()
            
            # –≠—Ç–∞–ø 1: –†–∞–∑–º–µ—Ç–∫–∞ –¥–∏—Å–∫–∞
            self.update_progress(0, "–†–∞–∑–º–µ—Ç–∫–∞ –¥–∏—Å–∫–∞...")
            commands = [
                f"parted -s {disk} mklabel gpt",
                f"parted -s {disk} mkpart primary fat32 1MiB 513MiB",
                f"parted -s {disk} set 1 esp on",
                f"parted -s {disk} mkpart primary ext4 513MiB 100%",
                f"mkfs.fat -F32 {disk}1",
                f"mkfs.ext4 {disk}2",
                f"mount {disk}2 /mnt",
                f"mkdir -p /mnt/boot/efi",
                f"mount {disk}1 /mnt/boot/efi"
            ]
            
            for cmd in commands:
                if not self.run_command(cmd):
                    return
            
            # –≠—Ç–∞–ø 2: –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
            self.update_progress(1, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            packages = "base linux linux-firmware sudo nano bash-completion"
            if not self.run_command(f"pacstrap /mnt {packages}"):
                return
            self.run_command("genfstab -U /mnt >> /mnt/etc/fstab")
            
            # –≠—Ç–∞–ø 3: KDE Plasma
            self.update_progress(2, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞...")
            packages = "xorg-server xorg-xinit sddm plasma dolphin konsole firefox networkmanager"
            if not self.run_command(f"arch-chroot /mnt pacman -S --noconfirm {packages}"):
                return
            
            # –≠—Ç–∞–ø 4: –ò–≥—Ä–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
            self.update_progress(3, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...")
            packages = "steam wine-staging lutris gamemode mangohud vulkan-icd-loader"
            self.run_command(f"arch-chroot /mnt pacman -S --noconfirm {packages}")
            
            # –≠—Ç–∞–ø 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã
            self.update_progress(4, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
            setup_commands = [
                f"echo '{self.hostname.get()}' > /mnt/etc/hostname",
                "echo 'en_US.UTF-8 UTF-8' >> /mnt/etc/locale.gen",
                "echo 'ru_RU.UTF-8 UTF-8' >> /mnt/etc/locale.gen",
                "arch-chroot /mnt locale-gen",
                "echo 'LANG=en_US.UTF-8' > /mnt/etc/locale.conf",
                f"ln -sf /usr/share/zoneinfo/{self.timezone.get()} /mnt/etc/localtime",
                "arch-chroot /mnt hwclock --systohc"
            ]
            
            for cmd in setup_commands:
                self.run_command(cmd)
            
            # –≠—Ç–∞–ø 6: –ë—Ä–µ–Ω–¥–∏–Ω–≥
            self.update_progress(5, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞...")
            os_release = f'''NAME="Reaven OS"
PRETTY_NAME="Reaven OS"
ID=reaven
BUILD_ID=rolling
HOME_URL="https://reaven.goodfaceteam.ru/"'''
            
            with open("/mnt/etc/os-release", "w") as f:
                f.write(os_release)
            
            # –≠—Ç–∞–ø 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.update_progress(6, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            user_commands = [
                f"arch-chroot /mnt useradd -m -G wheel -s /bin/bash {self.username.get()}",
                f"echo '{self.username.get()}:{self.password.get()}' | arch-chroot /mnt chpasswd",
                "echo '%wheel ALL=(ALL) ALL' >> /mnt/etc/sudoers"
            ]
            
            for cmd in user_commands:
                if not self.run_command(cmd):
                    return

            self.update_progress(7, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
	    services = ["NetworkManager", "sddm", "bluetooth", "cups", "avahi-daemon"]
	    for service in services:
   		 self.run_command(f"arch-chroot /mnt systemctl enable {service}")
   		 self.log_message(f"‚úÖ –í–∫–ª—é—á–µ–Ω —Å–µ—Ä–≤–∏—Å: {service}")
            
            # Good Face ID –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            if self.use_goodface_id.get():
                self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Good Face ID...")
                gf_dir = "/mnt/home/{}/.goodface".format(self.username.get())
                self.run_command(f"mkdir -p {gf_dir}")
                with open("/mnt/usr/share/applications/goodface-id.desktop", "w") as f:
                    f.write('''[Desktop Entry]
Name=Good Face ID
Exec=firefox https://id.goodfaceteam.ru/
Icon=system-users
Type=Application''')
            
            # –ó–∞–≥—Ä—É–∑—á–∏–∫
            self.log_message("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞...")
            boot_commands = [
                "arch-chroot /mnt pacman -S --noconfirm grub efibootmgr",
                "arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=REAVEN_OS",
                "arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg"
            ]
            
            for cmd in boot_commands:
                self.run_command(cmd)
            
            self.update_progress(7, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.log_message("üéâ Reaven OS —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            
            self.installation_completed = True
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
            self.root.after(1000, lambda: self.show_step(5))
            
        except Exception as e:
            self.log_message(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: {str(e)}")
    
    def finish_installation(self):
        if messagebox.askyesno("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä?"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º subprocess.run –≤–º–µ—Å—Ç–æ os.system –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            result = subprocess.run("reboot", shell=True)
            if result.returncode != 0:
                # –ï—Å–ª–∏ reboot –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º systemctl
                subprocess.run("systemctl reboot", shell=True)
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    if not os.path.exists("/run/archiso"):
        print("‚ùå –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏–∑ Live —Å—Ä–µ–¥—ã Arch!")
        sys.exit(1)
    
    app = RavenOSInstaller()
    app.run()
